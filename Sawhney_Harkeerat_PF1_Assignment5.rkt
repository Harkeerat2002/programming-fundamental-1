#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 78 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
0 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 255 255 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 255 255 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1           0 2775 0 4 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 186
(6
 #"#reader(lib \"htdp-beginner-abbr-reader.ss\" \"lang\")((modname Assi"
 #"gnment5) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#"
 #"t constructor repeating-decimal #f #t none #f () #f)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 60
#";Thank you for the extension, it really helped us all alot. "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          37 21           0 0           0 5 0 17 3 136
(7
 #";-------------------------------------------------------------------"
 #"--------------------------------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #"; 2.1 Programming with Lists"
0 0 24 29 1 #"\n"
0 0 17 3 136 7 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70
(8
 #";-------------------------------------------------------------------"
 #"--"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Excercise 1;"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";--------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";list<number> =    (list '()) --> empty list"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                             or"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";                  (list (....number....) --> nonempty list"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Interpretation = a list containing numbers"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";Data Example:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";An empty List:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"list<number_1>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";A nonempty List:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"list<number_2>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Excercise 2:"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";--------------"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;Input/Output:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";Signature: add-5= list<number> (input) --> list<number> (output) "
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Purpose Statement: To add 5 to each item in the list<number>"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Header:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(define (add-4 list<number>))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"add-5"
0 0 24 3 1 #" "
0 0 14 3 14 #"list<number_1>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"add-5"
0 0 24 3 1 #" "
0 0 14 3 14 #"list<number_2>"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";define (add-5 list<number>)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";       (cond"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";         [(empty? list<number>) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";         [(cons? list<number> ...add 5 to (first list<number)..."
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                              ...add 5 to (rest list<number)...]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"add-5"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"add-5"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 13 #";Excercise 3:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";list<name> =    (list '()) --> empty list"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                             or"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";                  (list (....names....) --> nonempty list"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";Interpretation = a list containing names"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";Data Example:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";An empty List:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<name_1>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";An non-empty list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<name_2>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Strange\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"Foster\""
0 0 24 3 1 #" "
0 0 19 3 14 #"\"Frankenstein\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 14 #"; Excercise 4:"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";--------------"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;Input/Output:"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";Signature: add-title= list<name> (input) --> list<namer> (output) "
0 0 24 29 1 #"\n"
0 0 17 3 75
(9
 #";Purpose Statement: To add the title \"Dr.\" in from of each name in"
 #" the list"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";Header:"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(define (add-title list<name>))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-title"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<name_1>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-title"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<name_2>"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"Dr. Strange\""
0 0 24 3 1 #" "
0 0 19 3 12 #"\"Dr. Foster\""
0 0 24 3 1 #" "
0 0 19 3 18 #"\"Dr. Frankenstein\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";define (add-title list<name>)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";       (cond"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";         [(empty? list<name>) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";         [(cons? list<name> ...add \"Dr.\" to (first list<name>)..."
0 0 24 29 1 #"\n"
0 0 17 3 70
(10
 #";                              ...add \"Dr.\" to (rest list<name>).."
 #".]))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"add-title"
0 0 24 3 1 #" "
0 0 14 3 10 #"list<name>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 10 #"list<name>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Dr. \""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"list<name>"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"add-title"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 10 #"list<name>"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 13 #";Excercise 5:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";list<min-number> =    (list '()) --> empty list"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                             or"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                  (list (....numbers....) --> nonempty list"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Interpretation = a list containing numbers"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";Data Example:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";An empty List:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_1>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";A list with only 1 item;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_2>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";An non-empty list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_3>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;Input/Output:"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";Signature: = list<min-number> (input) --> number (output) "
0 0 24 29 1 #"\n"
0 0 17 3 65
#";Purpose Statement: To print out the minimum number from the list"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Header:"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";(define (min-list list<min_number))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Examples"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_1>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_2>"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_3>"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";define (min-list list<min-number>)"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";       (cond"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";         [(empty? list<min-number>) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";         [(empty? (rest list<min-number>)) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 113
(11
 #";         [(cons? list<min-number>) .... (if (<= (first list<min-num"
 #"ber>) (min-list (rest list<min-number>))) ..."
) 0 0 24 29 1 #"\n"
0 0 17 3 119
(12
 #";                                                                   "
 #"                                          ...)))]))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 3 #") ("
0 0 14 3 8 #"min-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 6 #")))   "
0 0 17 3 15 #";recursive call"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"min-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 13 #";Excercise 6:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";list<2min-number> =    (list '()) --> empty list"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";                             or"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";                  (list (....numbers....) --> nonempty list"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Interpretation = a list containing numbers"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";Data Example:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";An empty List:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"list<2min-number_1>"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";A list with only 1 item;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"list<2min-number_2>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";An non-empty list"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"list<2min-number_3>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;Input/Output:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";Signature: = list<min-number> (input) --> number number (output) "
0 0 24 29 1 #"\n"
0 0 17 3 68
#";Purpose Statement: To print out the 2 minimum numbers from the list"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";Header:"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(define (2min-list list<2min_number))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"2min-list"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_1>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"2min-list"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_2>"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"2min-list"
0 0 24 3 1 #" "
0 0 14 3 18 #"list<min-number_3>"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define (2min-list list<number>)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";    [(empty? list<number>) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";    [(empty? (rest list<number>)) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 55 #"    [(cons? list<number>) (cons (min-list list<number>)"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";                                ...))]"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";    [else ...]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"2min-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 14 3 8 #"min-list"
0 0 24 3 1 #" "
0 0 14 3 12 #"list<number>"
0 0 24 3 2 #") "
0 0 14 3 12 #"list<number>"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 5 #"()))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 13 #";Excercise 7:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";NEList<posn_1> =    possitions with x and y coordinate"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";Interpretation = a list containing multiple coordinates"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";Data Example:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"NEList<posn_1>"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;Input/Output:"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";Signature: = NEList<posn_1> (input) --> coordinates (output) "
0 0 24 29 1 #"\n"
0 0 17 3 78
(13
 #";Purpose Statement: To print out the coordinates with least x coordi"
 #"nate value"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";Header:"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(define (min-x NEList<posn>))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 5 #"min-x"
0 0 24 3 1 #" "
0 0 14 3 14 #"NEList<posn_1>"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";(define (min-x NEList<posn>)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"    [("
0 0 17 3 2 #"or"
0 0 17 3 2 #" ("
0 0 17 3 6 #"equal?"
0 0 17 3 2 #" ("
0 0 17 3 5 #"posn?"
0 0 17 3 2 #" ("
0 0 17 3 5 #"first"
0 0 17 3 1 #" "
0 0 17 3 50 #"NEList<posn>)) #false) (empty? NEList<posn>)) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";    [(cons? NEList<posn>) (cond"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";                            [(empty? (rest NEList<posn>)) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";                           [else ...])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";Code:           "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"posn-min-x"
0 0 24 3 1 #" "
0 0 14 3 6 #"posn-1"
0 0 24 3 1 #" "
0 0 14 3 6 #"posn-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 6 #"posn-1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"posn-x"
0 0 24 3 1 #" "
0 0 14 3 6 #"posn-2"
0 0 24 3 3 #")) "
0 0 14 3 6 #"posn-1"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 6 #"posn-2"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"min-x"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 3 #") ("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 3 #")) "
0 0 21 3 6 #"#false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                            [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"posn-min-x"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 3 #") ("
0 0 14 3 5 #"min-x"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 12 #"NEList<posn>"
0 0 24 3 8 #")))])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 70 8 0 0 24 29 1 #"\n"
0 0 17 3 13 #";Excercise 8:"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";------------"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";;Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";n =    a postive integer number"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";Interpretation = a postive integer number"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";;Input/Output:"
0 0 24 29 1 #"\n"
0 0 17 3 83
(14
 #";Signature: = n (input) --> its powers of itself going -1 until reac"
 #"hed 1 (output) "
) 0 0 24 29 1 #"\n"
0 0 17 3 145
(15
 #";Purpose Statement: To print out the powers of the value by itself a"
 #"nd then subtracting and get the power of the number by itself until "
 #"reached 1"
) 0 0 24 29 1 #"\n"
0 0 17 3 8 #";Header:"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define (self-powers n)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Examples:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 11 #"self-powers"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 4 #"3125"
0 0 24 3 1 #" "
0 0 21 3 3 #"256"
0 0 24 3 1 #" "
0 0 21 3 2 #"27"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";(define (self-powers n)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"    [("
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 8 #"integer?"
0 0 17 3 1 #" "
0 0 17 3 16 #"n) (= n 1)) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"    [("
0 0 17 3 3 #"and"
0 0 17 3 2 #" ("
0 0 17 3 8 #"integer?"
0 0 17 3 1 #" "
0 0 17 3 18 #"n) (> n 1)) ...))]"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";    [else ...]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"self-powers"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"())]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 11 #"self-powers"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9          49 21           0 0           0 7 0 14 3 135
(16
 #"--------------------------------------------------------------------"
 #"-------------------------------------------------------------------"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #"; 2.2 Drawing app with undo:"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";Old Assigment code and would specify the changes specificly"
0 0 24 29 1 #"\n"
0 0 17 3 136 7 0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";--------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";Design Recipe for the Line"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";--------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";Data Type Deffination"
0 0 24 29 1 #"\n"
0 0 17 3 109
(17
 #";     Line- It is a structure which consists the start of the line a"
 #"nd the end of the line (structure, image)"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(18
 #";           Start and end are the coordinates of the line (posn= (st"
 #"art end))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";Input = start (coordinates, integers) end (coordinates, integers)"
0 0 24 29 1 #"\n"
0 0 17 3 70
(19
 #";Output = - A line in the canvas from the point (start) to point (en"
 #"d)"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";         - No line exists "
0 0 24 29 1 #"\n"
0 0 17 3 40 #";header (define-struct Line [start end])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"Line"
0 0 24 3 2 #" ["
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";-------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Design Recipe for the AppState"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";-------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";Data Type Deffination:"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";      Canvas = Image"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";      currLine = Line"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";      hasquit = boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57 #";Input = Canvas (image) currLine (Line) hasquit (boolean)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";Output = repersents the state of the appstate at the momment"
0 0 24 29 1 #"\n"
0 0 17 3 96
(20
 #";Purpose: AppState consists of information of the drawing app's stat"
 #"e at the momment of the app."
) 0 0 24 29 1 #"\n"
0 0 17 3 60
#";Header: (define-struct AppState [canvas currLine hasquit]) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 8 #"AppState"
0 0 24 3 2 #" ["
0 0 14 3 10 #"addedLines"
0 0 24 3 1 #" "
0 0 14 3 6 #"canvas"
0 0 24 3 1 #" "
0 0 14 3 8 #"currLine"
0 0 24 3 1 #" "
0 0 14 3 7 #"hasquit"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";---------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";Design Recipe for making the line"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";---------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";Data Type Deffination"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";      Rectangle = Image"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Input = draw->AppState(image)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";Output = image"
0 0 24 29 1 #"\n"
0 0 17 3 71
(21
 #";Purpose: returns an image to appstate which consists of the drawn l"
 #"ine"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(22
 #";Header: (define (draw app-state) (rectangle 500 500 \"solid\" \"bla"
 #"ck\"))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";(define empty-canvas (overlay/align \"center\" \"center\""
0 0 24 29 1 #"\n"
0 0 17 3 61
#";                                          (...rectangle ...)"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";                                          (...rectangle ...)))"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(define (get-Line-start app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";  (if (AppState exists output app-state) "
0 0 24 29 1 #"\n"
0 0 17 3 42 #";      (if (Line exists (output currLine))"
0 0 24 29 1 #"\n"
0 0 17 3 58
#";          (if there is a start of Line (output currLine))"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";          otherwise #false) "
0 0 24 29 1 #"\n"
0 0 17 3 26 #";      otherwise #false)) "
0 0 24 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define (get-Line-end app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";  (if (AppState exists output app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";      (if (Line exists (AppState-currLine app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";          (if there is a end of line (output currLine))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";          #false)  "
0 0 24 29 1 #"\n"
0 0 17 3 16 #";      #false)) "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(define (draw app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";  (...draw app with \"start\" and \"end\" coordinates "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"empty-canvas"
0 0 24 3 2 #" ("
0 0 14 3 13 #"overlay/align"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"center\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"center\""
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 9 #"rectangle"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 21 3 3 #"500"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lines-draw"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 2 #") "
0 0 14 3 12 #"empty-canvas"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"cons?"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 3 #") ("
0 0 14 3 10 #"scene+line"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lines-draw"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Line-start"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"Line-start"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Line-end"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 5 #"))) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 8 #"Line-end"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 15 #"line-state-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 8 #"make-pen"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Line?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"Line-start"
0 0 24 3 2 #" ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 6 #"#false"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-Line-end"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"Line?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"Line-end"
0 0 24 3 2 #" ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")  "
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";NEW"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 4 #"draw"
0 0 17 3 11 #" app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 5 #"    ("
0 0 17 3 7 #"if ...)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"      ("
0 0 17 3 9 #"if  ...))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";          (scene+line"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";               ... ("
0 0 17 3 10 #"lines-draw"
0 0 17 3 2 #" ("
0 0 17 3 19 #"AppState-addedLines"
0 0 17 3 12 #" app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"               ... ("
0 0 17 3 6 #"posn-x"
0 0 17 3 2 #" ("
0 0 17 3 14 #"get-Line-start"
0 0 17 3 1 #" "
0 0 17 3 15 #"app-state))...("
0 0 17 3 22 #"posn-y (get-Line-start"
0 0 17 3 15 #" app-state))   "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"               ... ("
0 0 17 3 6 #"posn-x"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-Line-end"
0 0 17 3 1 #" "
0 0 17 3 9 #"app-state"
0 0 17 3 12 #"))...(posn-y"
0 0 17 3 2 #" ("
0 0 17 3 12 #"get-Line-end"
0 0 17 3 12 #" app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"               ... ("
0 0 17 3 8 #"make-pen"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"white\""
0 0 17 3 1 #" "
0 0 17 3 2 #"15"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"solid\""
0 0 17 3 1 #" "
0 0 17 3 7 #"\"round\""
0 0 17 3 10 #" \"round\"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 20 #"               ... ("
0 0 17 3 10 #"lines-draw"
0 0 17 3 2 #" ("
0 0 17 3 19 #"AppState-addedLines"
0 0 17 3 13 #" app-state)))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";      ...))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"draw"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"posn?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"scene+line"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lines-draw"
0 0 24 3 2 #" ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 5 #"))   "
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-Line-end"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-Line-end"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 8 #"make-pen"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"round\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"lines-draw"
0 0 24 3 2 #" ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";---------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";Design Recipe of start of the line"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";---------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Data Types:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";        X1 = Coordinates, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";        Y1 = Coordinates, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; app-state = State of the App"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";Input = X1(coordinates) y1(coordinates) app-state"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Output = line's starting coordinates x1 y1"
0 0 24 29 1 #"\n"
0 0 17 3 96
(23
 #";Purpose Statement: AppStates takes x1 and y1 and assignts as the \""
 #"current\" lines startig point "
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(24
 #";Header: (define (move-start app-state) (make-AppState (AppState-can"
 #"vas app-state))))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(define (move-start app-state x1 y1)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";  (if (AppState exists output app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 87
(25
 #";      (if (there is a posn (fetch (get-Line-start) and input the cu"
 #"rrent (app-state)))"
) 0 0 24 29 1 #"\n"
0 0 17 3 25 #";          (make-AppState"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";           (AppState-canvas app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";           (make-Line (make-posn x1 y1) (get-Line-end app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";           (AppState-hasquit app-state)) "
0 0 24 29 1 #"\n"
0 0 17 3 21 #";          app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";      #false))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"move-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"y1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"make-AppState"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"AppState-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"make-Line"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"y1"
0 0 24 3 3 #") ("
0 0 14 3 12 #"get-Line-end"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";---------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";Design Recipe of end of the line"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";---------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";Data Types:"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";        X1 = Coordinates, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";        Y1 = Coordinates, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; app-state = State of the App"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";Input = X1(coordinates) y1(coordinates) app-state"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";Output = line's ending coordinates x1 y1"
0 0 24 29 1 #"\n"
0 0 17 3 96 23 0 0 24 29 1 #"\n"
0 0 17 3 85 24 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(define (move-end app-state x1 y1)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";  (if (AppState exists output app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 87 25 0 0 24 29 1 #"\n"
0 0 17 3 25 #";          (make-AppState"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";           (AppState-canvas app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 66
#";           (make-Line (make-posn x1 y1) (get-Line-end app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";           (AppState-hasquit app-state)) "
0 0 24 29 1 #"\n"
0 0 17 3 21 #";          app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";      #false))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"move-end"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"y1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"make-AppState"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 15 #"AppState-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"make-Line"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 2 #"x1"
0 0 24 3 1 #" "
0 0 14 3 2 #"y1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";-----------------------------------------NEW "
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Design Recipe of adding line to the cavas "
0 0 24 29 1 #"\n"
0 0 17 3 46 #";-----------------------------------------NEW "
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Data Type"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";   True and False = Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Input: call to this function"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Output: Returns an Appstate from the taken AppState"
0 0 24 29 1 #"\n"
0 0 17 3 94
(26
 #"; Header:(define (line-to-canvas appstate) (make AppState (AppState-"
 #"canvas app-state) #false))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 14 #"line-to-canvas"
0 0 17 3 1 #" "
0 0 17 3 10 #"app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 12 #"  (...)     "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 24 #"          (make-AppState"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 12 #"           ("
0 0 17 3 4 #"cons"
0 0 17 3 2 #" ("
0 0 17 3 17 #"AppState-currLine"
0 0 17 3 1 #" "
0 0 17 3 9 #"app-state"
0 0 17 3 11 #") (...))   "
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 12 #"           ("
0 0 17 3 4 #"draw"
0 0 17 3 1 #" "
0 0 17 3 10 #"app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 14 #"           ..."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 12 #"           ("
0 0 17 3 16 #"AppState-hasquit"
0 0 17 3 1 #" "
0 0 17 3 11 #"app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 10 #"          "
0 0 17 3 10 #"app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";      ...))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"line-to-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"make-AppState"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #") ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 5 #"))   "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"draw"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 21 3 6 #"#false"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";----------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";Design Recipe of deleting the line"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";----------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Data Type"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";   True and False = Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Input: call to this function"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Output: Returns an Appstate from the taken AppState"
0 0 24 29 1 #"\n"
0 0 17 3 96
(27
 #"; Header:(define (delete-LineState appstate) (make AppState (AppStat"
 #"e-canvas app-state) #false))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(define (delete-LineState app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";  (if (AppState exists output app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #";      (if (posnexists  (get-Line-start app-state))"
0 0 24 29 1 #"\n"
0 0 17 3 90
(28
 #";          (make-AppState (AppState-canvas app-state) #false (AppSta"
 #"te-hasquit app-state))"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";          app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";          #false))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"delete-LineState"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"posn?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"make-AppState"
0 0 24 3 2 #" ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #") ("
0 0 14 3 15 #"AppState-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 2 #" ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";--------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";Design Recipe of quiting the app-state"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";--------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Data Type"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";   True and False = Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Input: call to this function"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Output: Returns an Appstate from the taken AppState"
0 0 24 29 1 #"\n"
0 0 17 3 84
(29
 #"; Header:(define (quit appstate) (make AppState (AppState-canvas app"
 #"-state) #false))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";(define (quit app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";  (if (AppStateexists app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";      (make-AppState"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";       (AppState-canvas app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";       (AppState-currLine app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";       #true)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";      #false))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"quit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-AppState"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 15 #"AppState-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";quiting the application"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"quit?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #") ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";-------------------------------------- NEW"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";Design Recipe of doing undo in the app"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";-------------------------------------- NEW"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Data Type"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";   True and False = Boolean"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; Input: call to this function"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; Output: Returns an Appstate from the taken AppState"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Purpose: To restore to the previouse appstate"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; Header:"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 4 #"undo"
0 0 17 3 1 #" "
0 0 17 3 11 #"app-state))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Template:"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 4 #"undo"
0 0 17 3 1 #" "
0 0 17 3 10 #"app-state)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 16 #"  (make-AppState"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 8 #"   (cond"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 7 #"     [("
0 0 17 3 6 #"empty?"
0 0 17 3 2 #" ("
0 0 17 3 19 #"AppState-addedLines"
0 0 17 3 1 #" "
0 0 17 3 9 #"app-state"
0 0 17 3 7 #")) ...]"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 6 #"     ["
0 0 17 3 8 #"else...)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #";Code:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"undo"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"make-AppState"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     [("
0 0 14 3 6 #"empty?"
0 0 24 3 2 #" ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 2 #" ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 15 #"AppState-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 17 #"AppState-currLine"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";--------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Design Recipe of mouse binding"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";--------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Data Types"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; Booleans"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; x2 = Coordinates, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; y2 = Coordinate, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; x = Coordinates, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; y = Coordinate, Integers"
0 0 24 29 1 #"\n"
0 0 17 3 12 #"; e = string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";Input/Output"
0 0 24 29 1 #"\n"
0 0 17 3 80
(30
 #";Singnature: mouse call the mousevent integer which returns back to "
 #"the AppState"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(31
 #";Purpose States: The state is changed based on the mouse inputs. The"
 #"re are three events as bellow:"
) 0 0 24 29 1 #"\n"
0 0 17 3 78
(32
 #";                                   - button-pressed = starts to dra"
 #"w the line"
) 0 0 24 29 1 #"\n"
0 0 17 3 79
(33
 #";                                   - drag = changing the end point "
 #"of the line"
) 0 0 24 29 1 #"\n"
0 0 17 3 135
(34
 #";                                   - button-released = not changing"
 #" the end point of the line anymore and adding the line to the cavas"
) 0 0 24 29 1 #"\n"
0 0 17 3 88
(35
 #";Header: (define (mouse app-state x y e) (make-AppState-canvas app-s"
 #"tate) #false #true))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";(define (mouse app-state x y e)"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";    [(e =string \"button\") (...newline...)] "
0 0 24 29 1 #"\n"
0 0 17 3 42 #";    [(e =string \"drag\") (...move-end...)]"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";    [(e =string \"button-up\") (...line-to-canvas...)]"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";    [else (...newline...)]))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 2 #"y2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"AppState?"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"make-AppState"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 19 #"AppState-addedLines"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 15 #"AppState-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"make-Line"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 2 #"y2"
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-posn"
0 0 24 3 1 #" "
0 0 14 3 2 #"x2"
0 0 24 3 1 #" "
0 0 14 3 2 #"y2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 16 #"AppState-hasquit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 21 3 6 #"#false"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"mouse"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"button\""
0 0 24 3 3 #") ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"drag\""
0 0 24 3 3 #") ("
0 0 14 3 8 #"move-end"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"string=?"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"button-up\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"line-to-canvas"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 7 #"newline"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";----------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";Design Recipe of key binding"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";----------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Data Type"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   keys = string"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";Input/Output"
0 0 24 29 1 #"\n"
0 0 17 3 65
#";Signature: key returns an event based on the key to the AppState"
0 0 24 29 1 #"\n"
0 0 17 3 94
(36
 #";Purpose: key is a function which on press of of key calls the funct"
 #"ion as previously deffined"
) 0 0 24 29 1 #"\n"
0 0 17 3 28 #";         q = quit app-state"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";         escape = delete the LineState"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";         left = move the get-Line-start left by 5 possition"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";         right = move the get-Line-start right by 5 possition"
0 0 24 29 1 #"\n"
0 0 17 3 75
(37
 #";         down = move the get-line-start down (up in racket) by 5 po"
 #"ssition"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(38
 #";         up = move the get-line-start up (down in racket) by 5 poss"
 #"ition"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(39
 #";Header: (define (key app-state e) (make-AppState (AppState-canvas a"
 #"pp-state) #false #true)))) "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";Template"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(define (key app-state keys) "
0 0 24 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";    [(key= \"q\") (quit app-state)]"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";    [(key=\"escape\") (delete-LineState app-state)]"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";    [(key=\"left\") (move-start app-state by 5 possition left)"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";    [(key=\"right\") (move-start app-state by 5 possiont right)"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";    [(key=\"down\") (move-start app-state down by 5 possition)"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";    [(key=\"up\") (move-start app-state up by 5 possition)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    [else app-state]))"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"q\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"quit"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"escape\""
0 0 24 3 3 #") ("
0 0 14 3 16 #"delete-LineState"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"left\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"move-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"right\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"move-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"down\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"move-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"up\""
0 0 24 3 3 #") ("
0 0 14 3 10 #"move-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 6 #"posn-x"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 4 #")) ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"posn-y"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-Line-start"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #")) "
0 0 21 3 1 #"5"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"key=?"
0 0 24 3 1 #" "
0 0 14 3 4 #"keys"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"u\""
0 0 24 3 3 #") ("
0 0 14 3 4 #"undo"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 9 #"app-state"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 17 3 39 #";--------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";Design Recipe of the Big Bang Function"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";--------------------------------------"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";Data Type:"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";   draw=function call"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   mouse=function call"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";   key=function call"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   quit=functionc call"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";Input/Output"
0 0 24 29 1 #"\n"
0 0 17 3 92
(40
 #";Signature; Final Drawing app return the bing bang function for all "
 #"the funcion define above"
) 0 0 24 29 1 #"\n"
0 0 17 3 47 #";Purpose Statement; to render all the functions"
0 0 24 29 1 #"\n"
0 0 17 3 72
(41
 #";Header (define (final-drawing-app final-state) (big-bang final-stat"
 #"e)))"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";Code"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"final-drawing-app"
0 0 24 3 1 #" "
0 0 14 3 11 #"final-state"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 11 #"final-state"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 7 #"to-draw"
0 0 24 3 1 #" "
0 0 14 3 4 #"draw"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 8 #"on-mouse"
0 0 24 3 1 #" "
0 0 14 3 5 #"mouse"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 6 #"on-key"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 9 #"stop-when"
0 0 24 3 1 #" "
0 0 14 3 5 #"quit?"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"final-drawing-app"
0 0 24 3 2 #" ("
0 0 14 3 13 #"make-AppState"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 12 #"empty-canvas"
0 0 24 3 2 #"  "
0 0 21 3 6 #"#false"
0 0 24 3 1 #" "
0 0 21 3 6 #"#false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0           0
